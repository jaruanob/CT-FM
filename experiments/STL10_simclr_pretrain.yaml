# Replicating the experiment from 
# https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/tutorial17/SimCLR.html

project: /home/ibro/Projects/lighter/projects/ssl-radiologist-lighter
trainer:
    _target_: pytorch_lightning.Trainer
    benchmark: true
    max_epochs: 100
    check_val_every_n_epoch: 5
    accelerator: gpu
    devices: 1  # 2
    strategy: null  # ddp
    sync_batchnorm: True
    precision: 16
    callbacks:
        - _target_: lighter.callbacks.LighterWriter
          write_dir: "$@project + '/predictions' "
          write_as: ["tensor", "tensor"]
          write_on: "step" # "epoch"

    #     - _target_: pytorch_lightning.callbacks.ModelCheckpoint
    #       dirpath: ${trainer.logger.save_dir}/checkpoints
    #       verbose: True
    #       save_last: True
    #       every_n_epochs: 1
system:
    _target_: lighter.LighterSystem
    batch_size: 256 # "$256 // %trainer#devices"
    pin_memory: true
    drop_last_batch: True  # Used in SSL cases because of negatives
    num_workers: 1 # 3
    model:
        _target_: lightly.models.simclr.SimCLR
        num_ftrs: 512
        out_dim: 128
        backbone:
            _target_: monai.networks.nets.EfficientNetBN
            model_name: efficientnet-b0
            pretrained: False
            spatial_dims: 2
            in_channels: 3
            num_classes: 512

            # _target_: torchvision.models.resnet18
            # pretrained: False
            # num_classes: "%system#model#num_ftrs"  
            # # _target_: lighter.utils.model.replace_layer_with_identity
            # # layer_name: fc
            # # model:
            # #     _target_: torchvision.models.resnet18
    criterion:
        _target_: lightly.loss.ntx_ent_loss.NTXentLoss
        temperature: 0.07
        gather_distributed: True

    optimizers:
        _target_: torch.optim.Adam
        params: "$@system#model.parameters()"        
        lr: 0.0005
        weight_decay: 0.0001
    # schedulers:
    #     _target_: torch.optim.lr_scheduler.CosineAnnealingLR
    #     T_max: "%trainer#max_epochs"
    #     eta_min: "$%system#optimizers#lr / 50"

    train_metrics: null
    val_metrics: "%system#train_metrics"
    test_metrics: "%system#train_metrics"
    train_dataset:
        _target_: torchvision.datasets.STL10
        split: unlabeled
        root: datasets/cifar10
        download: true
        transform:
            _target_: lighter.contrib.transforms.ssl.Duplicate
            transforms1:
                _target_: torchvision.transforms.Compose
                transforms:
                    -
                        _target_: torchvision.transforms.RandomHorizontalFlip
                    -
                        _target_: torchvision.transforms.RandomResizedCrop
                        size: 96
                    -
                        _target_: torchvision.transforms.RandomApply
                        p: 0.8
                        transforms:
                            - 
                                _target_: torchvision.transforms.ColorJitter
                                brightness: 0.5
                                contrast: 0.5
                                saturation: 0.5
                                hue: 0.1
                    -
                        _target_: torchvision.transforms.RandomGrayscale
                        p: 0.2
                    -
                        _target_: torchvision.transforms.GaussianBlur
                        kernel_size: 9
                    -
                        _target_: torchvision.transforms.ToTensor
                    -
                        _target_: torchvision.transforms.Normalize
                        mean: 0.5
                        std: 0.5

            transforms2: "%#transforms1"
    val_dataset: null
    test_dataset: null
    predict_dataset: # "%#train_dataset"
        _target_: torchvision.datasets.STL10
        split: unlabeled
        root: datasets/cifar10
        download: true
        transform:
            _target_: lighter.contrib.transforms.ssl.Duplicate
            transforms1:
                _target_: torchvision.transforms.Compose
                transforms:
                    -
                        _target_: torchvision.transforms.RandomHorizontalFlip
                    -
                        _target_: torchvision.transforms.RandomResizedCrop
                        size: 96
                    -
                        _target_: torchvision.transforms.RandomApply
                        p: 0.8
                        transforms:
                            - 
                                _target_: torchvision.transforms.ColorJitter
                                brightness: 0.5
                                contrast: 0.5
                                saturation: 0.5
                                hue: 0.1
                    -
                        _target_: torchvision.transforms.RandomGrayscale
                        p: 0.2
                    -
                        _target_: torchvision.transforms.GaussianBlur
                        kernel_size: 9
                    -
                        _target_: torchvision.transforms.ToTensor
                    -
                        _target_: torchvision.transforms.Normalize
                        mean: 0.5
                        std: 0.5

            transforms2: "%#transforms1"
