project: .
vars:
    NUM_FTRS_BY_BACKBONE: {"SegResNetDS": 512, "ResNet50x2": 4096}
    SPACING: [3, 1, 1]
    ROOT_EXPERIMENT_PATH: $f"/data/home/jaruanob/Documents/Repositories/Foundational_models/Experiments/CT-FM/1761918348"
    PRETRAINED_WEIGHTS_PATH: $f"/data/home/jaruanob/Documents/Repositories/Foundational_models/Experiments/CT-FM/released_checkpoints/ct_fm_feature_extractor.pth"
trainer:
    _target_: pytorch_lightning.Trainer
    benchmark: True
    # Full run - 500 epochs, 500 batches per epoch, 4 batch size, 4 GPUs / 148,134 dataset size â‰ˆ 27 epochs
    max_epochs: 500
    # limit_train_batches: 500
    accelerator: gpu
    devices: [2]
    strategy: ddp
    sync_batchnorm: True
    precision: 16-mixed
    log_every_n_steps: 20
    check_val_every_n_epoch: 1
    logger: 
        _target_: pytorch_lightning.loggers.WandbLogger
        name: $f"CT_FM_{@vars#FRAMEWORK}_{@vars#BACKBONE_NAME}"
        project: CT_FM
        save_dir: $f"{@vars#ROOT_EXPERIMENT_PATH}/logs/CT_FM_{@vars#FRAMEWORK}_{@vars#BACKBONE_NAME}"
  
    callbacks:
        #Save the last checkpoint
        - _target_: pytorch_lightning.callbacks.ModelCheckpoint
          dirpath: $f"{@vars#ROOT_EXPERIMENT_PATH}/checkpoints/CT_FM_{@vars#FRAMEWORK}_{@vars#BACKBONE_NAME}"
          save_last: True
          save_top_k: 1
          verbose: True
          every_n_epochs: 1
system:
    _target_: lighter.System

    model:

    optimizer:
        _target_: torch.optim.AdamW
        params: "$@system#model.parameters()"
        # Learning rate calculated as per: `lr = (effective_batch_size) / 256 * base_lr`
        lr: 0.0001
        weight_decay: 0.000001
  
    scheduler:
        _target_: monai.optimizers.WarmupCosineSchedule
        optimizer: "@system#optimizer"
        warmup_steps: 10  # First 10 epochs
        t_total: $@trainer#max_epochs
  
    dataloaders:
        train:
            _target_: torch.utils.data.DataLoader
            batch_size: 4
            pin_memory: True
            num_workers: 2        
            dataset:
                _target_: project.data.safe_dataset.SafeDataset
                dataset:
                    _target_: monai.data.Dataset
                    data: "$pickle.load(open(@vars#ROOT_EXPERIMENT_PATH + '/scan_list-CT-FM_data_v1_train.pkl', 'rb'))"
                    _requires_: "$import pickle"
                    transform:

        val:
            _target_: torch.utils.data.DataLoader
            batch_size: 1
            pin_memory: True
            num_workers: 2        
            dataset:
                _target_: project.data.safe_dataset.SafeDataset
                dataset:
                    _target_: monai.data.Dataset
                    data: "$pickle.load(open(@vars#ROOT_EXPERIMENT_PATH + '/scan_list-CT-FM_data_v1_validation.pkl', 'rb'))"
                    _requires_: "$import pickle"
                    transform:

    adapters:
        train:
            batch:
                _target_: lighter.adapters.BatchAdapter
                input_accessor: "input"

            criterion:
                _target_: lighter.adapters.CriterionAdapter
                pred_argument: 0

        val:
            batch:
                _target_: lighter.adapters.BatchAdapter
                input_accessor: "input"

            criterion:
                _target_: lighter.adapters.CriterionAdapter
                pred_argument: 0