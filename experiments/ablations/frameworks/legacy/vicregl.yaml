vars#FRAMEWORK: VICRegL

# Given an architecture, its output feature size will be equal to input patch size divided by this factor.
vars#DOWNSAMPLE_FACTOR_BY_BACKBONE: {"SegResNetDS": 16, "ResNet50x2": 32}
vars#HIGH_RES_SIZE: [128, 256, 256]
vars#HIGH_RES_GRID_SIZE: "$[x // @vars#DOWNSAMPLE_FACTOR_BY_BACKBONE[@vars#BACKBONE_NAME] for x in @vars#HIGH_RES_SIZE]"

system#model:
    _target_: torch.compile
    model:
      _target_: project.models.frameworks.VICRegL
      num_ftrs: '$@vars#NUM_FTRS_BY_BACKBONE[@vars#BACKBONE_NAME]'
      backbone:


system#criterion:
    _target_: project.loss.VICRegLLoss
    alpha: 0.75
    gather_distributed: True

system#dataloaders#train#dataset#dataset#transform:
    _target_: monai.transforms.Compose
    transforms:
        - _target_: monai.transforms.LoadImage
          image_only: True
        - _target_: monai.transforms.EnsureChannelFirst
        - _target_: monai.transforms.Orientation
          axcodes: SPL
          lazy: True
        - _target_: monai.transforms.Spacing
          pixdim: "%vars#SPACING"
          mode: bilinear
          lazy: True
        - _target_: monai.transforms.CropForeground
          lazy: True
        - _target_: monai.transforms.SpatialPad
          spatial_size: "%vars#HIGH_RES_SIZE"
          value: -1024
          lazy: True
        - _target_: monai.transforms.ScaleIntensityRange
          a_min: -1024
          a_max: 2048
          b_min: 0
          b_max: 1
          clip: True
        - _target_: project.transforms.ssl.MultiCrop
          high_resolution_transforms:
            - _target_: monai.transforms.Compose
              transforms:
                # This transform produces a dict, we start using the dict transforms after it.
                - _target_: project.transforms.vicregl.RandomResizedCropAndFlip3D
                  roi_size: "%vars#HIGH_RES_SIZE"
                  grid_size: "%vars#HIGH_RES_GRID_SIZE"
                - # RandHistogramShift serves purpose similar to color jitter by modifying the intensity histogram
                  _target_: monai.transforms.RandHistogramShiftd
                  keys: image
                  prob: 0.5
                - # RandGaussianSmooth is similar to SimCLR GaussianBlur
                  _target_: monai.transforms.RandGaussianSmoothd
                  keys: image
                  prob: 0.5
                - _target_: monai.transforms.SelectItemsd
                  keys: ["image", "grid"]
                - _target_: monai.transforms.ToTensord
                  keys: ["image", "grid"]
                  track_meta: False
            - "%#0"
        - _target_: monai.transforms.Lambda
          func: '$lambda x: {"input": x}'

