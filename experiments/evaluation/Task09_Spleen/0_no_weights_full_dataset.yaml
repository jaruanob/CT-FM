project: /home/ibrahim/Projects/lighter/projects/ssl-radiologist-lighter

CONSTANTS:
  ORIENTATION: SPL  # Because loading nifti's, this will reorient the axes so that it's the same as when loading nrrd's
  PATCH_SIZE: [64, 192, 160]
  SPACING: [1.6, 0.79, 0.79]
  THRESHOLD:
    MIN: -41
    MAX: 176
  NORMALIZATION:
    SUBTRAHEND: 99.29
    DIVISOR: 39.47

trainer:
  _target_: pytorch_lightning.Trainer
  benchmark: True
  max_epochs: 1500
  accelerator: gpu
  strategy: null
  precision: 16
  logger: null
  log_every_n_steps: 10
  check_val_every_n_epoch: 10
  callbacks:
    - _target_: lighter.callbacks.logger.LighterLogger
      project: ssl-radiologist-eval-2
      log_dir: /home/ibrahim/Projects/lighter/projects/ssl-radiologist-lighter/logs/eval
      wandb: True
      input_type: image
      target_type: image
      pred_type: image
      max_samples: 4
    - _target_: pytorch_lightning.callbacks.ModelCheckpoint
      dirpath: "$@trainer#callbacks#0#log_dir + '/checkpoints/0_no_weights_full_dataset'"
      monitor: val_loss
      mode: min
      save_top_k: 5
      save_weights_only: True

system:
  _target_: lighter.LighterSystem
  batch_size: 8
  pin_memory: True
  num_workers: 6

  model:
    _target_: monai.networks.nets.FlexibleUNet
    in_channels: 1
    out_channels: 1
    spatial_dims: 3
    upsample: deconv
    backbone: efficientnet-b4
  
  post_criterion_activation:
    _target_: torch.sigmoid
    _mode_: partial

  criterion:
    _target_: monai.losses.DiceCELoss
    sigmoid: True
    batch: True

  optimizers:
    _target_: torch.optim.SGD
    params: "$@system#model.parameters()"
    lr: 0.005
    momentum: 0.99
    weight_decay: 0.00003
    nesterov: True

  schedulers:
    _target_: torch.optim.lr_scheduler.SequentialLR
    optimizer: "@system#optimizers"
    milestones: [500]
    schedulers:
      # Do not change LR until the milestone
      - _target_: torch.optim.lr_scheduler.LambdaLR
        optimizer: "@system#optimizers"
        lr_lambda: "$lambda epoch: 1"
      # PolyLR, but starts from the milestone. Hence, the -500.
      - _target_: torch.optim.lr_scheduler.LambdaLR
        optimizer: "@system#optimizers"
        lr_lambda: "$lambda epoch: (1 - (epoch - 500) / (@trainer#max_epochs - 500)) ** 0.9"  # PolyLR
        # lr_lambda: "$lambda epoch: (1 - epoch / @trainer#max_epochs) ** 0.9"  # PolyLR

  inferer:
    _target_: monai.inferers.SlidingWindowInferer
    roi_size: "%CONSTANTS#PATCH_SIZE"
    sw_batch_size: "%system#batch_size"
    overlap: 0.25
    mode: "gaussian"

  train_dataset:
    _disabled_: False
    _target_: monai.apps.DecathlonDataset
    root_dir: /home/ibrahim/Projects/lighter/.datasets
    task: Task09_Spleen
    section: training
    val_frac: 0.2  # 41 train/val -> 33 train, 8 val
    download: True
    transform:
      - _target_: monai.transforms.LoadImaged
        keys: ["image", "label"]

      - _target_: monai.transforms.EnsureChannelFirstd
        keys: ["image", "label"]

      # Only in training
      - _target_: monai.transforms.CropForegroundd
        keys: ["image", "label"]
        source_key: "image"

      - _target_: monai.transforms.Orientationd
        keys: ["image", "label"]
        axcodes: "%CONSTANTS#ORIENTATION"

      - _target_: monai.transforms.Spacingd
        keys: ["image", "label"] 
        pixdim: "%CONSTANTS#SPACING"
        mode: [3, "nearest"]
        padding_mode: ["nearest", "border"]

      - _target_: monai.transforms.ThresholdIntensityd
        keys: "image"
        threshold: "%CONSTANTS#THRESHOLD#MIN"
        cval: "%CONSTANTS#THRESHOLD#MIN"
        above: True

      - _target_: monai.transforms.ThresholdIntensityd
        keys: "image"
        threshold: "%CONSTANTS#THRESHOLD#MAX"
        cval: "%CONSTANTS#THRESHOLD#MAX"
        above: False

      - _target_: monai.transforms.NormalizeIntensityd
        keys: "image"
        subtrahend: "%CONSTANTS#NORMALIZATION#SUBTRAHEND"
        divisor: "%CONSTANTS#NORMALIZATION#DIVISOR"

      # ---- Training-related nnUNet transforms ----
      - _target_: monai.transforms.SpatialPadd
        keys: ["image", "label"]
        spatial_size: "%CONSTANTS#PATCH_SIZE"
      
      - _target_: monai.transforms.RandCropByPosNegLabeld
        keys: ["image", "label"]
        label_key: "label"
        spatial_size: "%CONSTANTS#PATCH_SIZE"
        pos: 2
        neg: 1
        num_samples: 3
        image_key: "image"
        image_threshold: 0

      - _target_: monai.transforms.RandZoomd
        keys: ["image", "label"]
        min_zoom: 0.9
        max_zoom: 1.2
        mode: ["trilinear", "nearest"]
        align_corners: [True, null]
        prob: 0.15

      - _target_: monai.transforms.RandGaussianNoised
        keys: "image"
        std: 0.01
        prob: 0.15

      - _target_: monai.transforms.RandGaussianSmoothd
        keys: "image"
        sigma_x: [0.5, 1.15]
        sigma_y: [0.5, 1.15]
        sigma_z: [0.5, 1.15]
        prob: 0.15

      - _target_: monai.transforms.RandScaleIntensityd
        keys: "image"
        factors: 0.3
        prob: 0.15

      - _target_: monai.transforms.RandFlipd
        keys: ["image", "label"]
        spatial_axis: [0]
        prob: 0.5

      - _target_: monai.transforms.RandFlipd
        keys: ["image", "label"]
        spatial_axis: [1]
        prob: 0.5

      - _target_: monai.transforms.RandFlipd
        keys: ["image", "label"]
        spatial_axis: [2]
        prob: 0.5
      # --------------------------------------------

      - _target_: monai.transforms.CastToTyped
        keys: ["image", "label"]
        dtype: 
          - _target_: torch.float32
          - _target_: torch.uint8

      - _target_: monai.transforms.EnsureTyped
        keys: ["image", "label"]

      - _target_: project.transforms.monai_related.ExtractFromDict
        keys: ["image", "label"]

  train_collate:
    _disabled_: False
    _target_: monai.data.utils.list_data_collate
    _mode_: partial

  val_dataset:
    _disabled_: False
    _target_: monai.apps.DecathlonDataset
    root_dir: /home/ibrahim/Projects/lighter/.datasets
    task: Task09_Spleen
    section: validation
    val_frac: 0.2  # 41 train/val -> 33 train, 8 val
    download: True
    transform:
      - _target_: monai.transforms.LoadImaged
        keys: ["image", "label"]

      - _target_: monai.transforms.EnsureChannelFirstd
        keys: ["image", "label"]

      - _target_: project.transforms.monai_related.SpatialCropAroundBoundingRectd
        crop_keys: ["image", "label"]
        bbox_key: "image"

      - _target_: monai.transforms.Orientationd
        keys: ["image", "label"]
        axcodes: "%CONSTANTS#ORIENTATION"

      - _target_: monai.transforms.Spacingd
        keys: ["image", "label"] 
        pixdim: "%CONSTANTS#SPACING"
        mode: [3, "nearest"]
        padding_mode: ["nearest", "border"]

      - _target_: monai.transforms.ThresholdIntensityd
        keys: "image"
        threshold: "%CONSTANTS#THRESHOLD#MIN"
        cval: "%CONSTANTS#THRESHOLD#MIN"
        above: True

      - _target_: monai.transforms.ThresholdIntensityd
        keys: "image"
        threshold: "%CONSTANTS#THRESHOLD#MAX"
        cval: "%CONSTANTS#THRESHOLD#MAX"
        above: False

      - _target_: monai.transforms.NormalizeIntensityd
        keys: "image"
        subtrahend: "%CONSTANTS#NORMALIZATION#SUBTRAHEND"
        divisor: "%CONSTANTS#NORMALIZATION#DIVISOR"

      - _target_: monai.transforms.CastToTyped
        keys: ["image", "label"]
        dtype: 
          - _target_: torch.float32
          - _target_: torch.uint8

      - _target_: monai.transforms.EnsureTyped
        keys: ["image", "label"]

      - _target_: project.transforms.monai_related.ExtractFromDict
        keys: ["image", "label"]

  train_metrics:
    - _target_: torchmetrics.Dice

  val_metrics: 
    - _target_: torchmetrics.Dice

  test_metrics: 
    - _target_: torchmetrics.Dice
