CONSTANTS: 
  imports: "$import pickle"
project: .
trainer:
  _target_: pytorch_lightning.Trainer
  benchmark: True
  max_epochs: 500
  limit_train_batches: 500
  accelerator: gpu
  devices: 4
  strategy: ddp
  sync_batchnorm: True
  precision: 16-mixed
  log_every_n_steps: 100
  logger: 
    _target_: pytorch_lightning.loggers.WandbLogger
    name: $f"IDC_{@CONSTANTS#pretrain_method}_pretrain"
    project: "IDC_SSL_CT"
    save_dir: $f"/mnt/data16_r2d6/IDC_SSL_CT/runs/logs/IDC_{@CONSTANTS#pretrain_method}_pretrain"

  callbacks:
    - _target_: pytorch_lightning.callbacks.ModelCheckpoint
      dirpath: $f"/mnt/data16_r2d6/IDC_SSL_CT/runs/checkpoints/IDC_{@CONSTANTS#pretrain_method}_pretrain/{@CONSTANTS#version}"
      save_last: True
      verbose: True
      every_n_epochs: 1 # 10
      save_weights_only: False  # True

system:
  _target_: lighter.LighterSystem
  batch_size: 2
  pin_memory: True
  drop_last_batch: True # Used in SSL cases because of negatives
  num_workers: 6 # 32

  optimizer:
    _target_: torch.optim.AdamW
    params: "$@system#model.parameters()"
    # Learning rate calculated as per: `lr = (effective_batch_size) / 256 * base_lr`
    lr: "$((@system#batch_size * @trainer#devices)/256) * 0.0007"
    weight_decay: 0.000001

  scheduler:
    _target_: monai.optimizers.WarmupCosineSchedule
    optimizer: "@system#optimizer"
    warmup_steps: 10  # First 10 epochs
    t_total: $@trainer#max_epochs


  datasets:
    train:
      _target_: project.datasets.safe_dataset_wrapper.SafeDatasetWrapper
      disable: False
      dataset:
        _target_: project.datasets.idc_ssl.IDCDataset
        # image_files: "$list(pathlib.Path('/mnt/data16/IDC_SSL_CT/scans/').rglob('scan.nrrd'))"
        image_files: "$[pathlib.Path(str(path).replace('data16', 'data16_r2d6')) for path in pickle.load(open('/mnt/data16_r2d6/IDC_SSL_CT/scan_list.pkl', 'rb'))]"
        _requires_: "$import pathlib"
    
