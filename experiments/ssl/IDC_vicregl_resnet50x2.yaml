imports: "$import pickle"
version: "lr=dynamic_global_grid_size=[4,8,8]_resnet50_x2_100k"

CONSTANTS:
  HIGH_RES_SIZE: [128, 256, 256]
  HIGH_RES_GRID_SIZE: [4, 8, 8]  # HIGH_RES_SIZE divided by 32 for ResNet50

project: /mnt/data6/ibro/lighter/projects/lighter-ct-fm
trainer:
  _target_: pytorch_lightning.Trainer
  benchmark: True
  max_epochs: 500
  limit_train_batches: 500
  accelerator: gpu
  #
  devices: 4
  strategy: ddp #_find_unused_parameters_true
  sync_batchnorm: True
  #
  precision: 16-mixed
  log_every_n_steps: 100
  logger: False
  callbacks:
    - _target_: lighter.callbacks.logger.LighterLogger
      project: IDC_vicregl_pretrain
      log_dir: $f"/mnt/data16/IDC_SSL_CT/runs/logs/IDC_vicregl_pretrain/{@version}"
      wandb: True

    - _target_: pytorch_lightning.callbacks.ModelCheckpoint
      dirpath: $f"/mnt/data16/IDC_SSL_CT/runs/checkpoints/IDC_vicregl_pretrain/{@version}"
      save_last: True
      verbose: True
      every_n_epochs: 1 # 10
      save_weights_only: False  # True

system:
  _target_: lighter.LighterSystem
  batch_size: 4
  pin_memory: True
  drop_last_batch: True # Used in SSL cases because of negatives
  num_workers: 6 # 32

  model:
    _target_: project.models.vicregl.VICRegL
    num_ftrs: 4096
    spatial_dims: 3
    backbone:
      _target_: project.models.resnet.ResNet
      block: "bottleneck"
      layers: [3, 4, 6, 3]
      block_inplanes: [64, 128, 256, 512]
      n_input_channels: 1
      conv1_t_stride: 2
      widen_factor: 2
      feed_forward: False
      bias_downsample: True

  criterion:
    _target_: project.loss.vicregl.VICRegLLoss
    gather_distributed: True

  optimizer:
    _target_: torch.optim.AdamW
    params: "$@system#model.parameters()"
    # Learning rate calculated as per: `lr = (effective_batch_size) / 256 * base_lr`
    lr: "$((@system#batch_size * @trainer#devices)/256) * 0.0007"
    weight_decay: 0.000001
  
  scheduler:
    _target_: monai.optimizers.WarmupCosineSchedule
    optimizer: "@system#optimizer"
    warmup_steps: 10  # First 10 epochs
    t_total: $@trainer#max_epochs

  datasets:
    train:
      _target_: project.datasets.safe_dataset_wrapper.SafeDatasetWrapper
      disable: False
      dataset:
        _target_: project.datasets.idc_ssl.IDCDataset
        # image_files: "$list(pathlib.Path('/mnt/data16/IDC_SSL_CT/scans/').rglob('scan.nrrd'))"
        image_files: "$pickle.load(open('/mnt/data16/IDC_SSL_CT/scan_list.pkl', 'rb'))"
        transform:
          _target_: monai.transforms.Compose
          transforms:
            - _target_: monai.transforms.LoadImage
              image_only: True
            - _target_: monai.transforms.EnsureChannelFirst
            - _target_: monai.transforms.Orientation
              axcodes: "LPS"
            - _target_: monai.transforms.Transpose
              indices: [0, 3, 2, 1] # cxyz -> czyx
            - _target_: monai.transforms.CropForeground
            - _target_: monai.transforms.ScaleIntensityRange
              a_min: -1024
              a_max: 3072
              b_min: 0
              b_max: 1
              clip: True
            - _target_: monai.transforms.SpatialPad
              spatial_size: "@CONSTANTS#HIGH_RES_SIZE"
            - _target_: monai.transforms.ToTensor
            - _target_: project.transforms.ssl.MultiCrop
              high_resolution_transforms:
                - _target_: monai.transforms.Compose
                  transforms:
                    # This transform produces a dict, we start using MONAI's dict transforms after it.
                    - _target_: project.transforms.vicregl.RandomResizedCropAndFlip3D
                      roi_size: "@CONSTANTS#HIGH_RES_SIZE"
                      grid_size: "@CONSTANTS#HIGH_RES_GRID_SIZE"
                    - # RandHistogramShift serves purpose similar to color jitter by modifying the intensity histogram
                      _target_: monai.transforms.RandHistogramShiftd
                      keys: image
                      prob: 0.5
                    - # RandGaussianSmooth is similar to SimCLR GaussianBlur
                      _target_: monai.transforms.RandGaussianSmoothd
                      keys: image
                      prob: 0.5
                    - _target_: monai.transforms.SelectItemsd
                      keys: ["image", "grid"]
                    - _target_: monai.transforms.ToTensord
                      keys: ["image", "grid"]
                      track_meta: False
                - "%#0"
