project: .
_requires_:
    - "$import monai"
    - "$import torch"

args:
  validate:
    ckpt_path: $f"{@vars#save_dir}/best.ckpt"
  test: "%#validate"
  predict: "%#validate"


vars:
    init_LR: 0.0002
    patch_size: "$[96, 160, 160] if @vars#format == 'lighter' else [160, 160, 96]"
    val_max_patch_size: "$[100, 384, 384] if @vars#format == 'lighter' else [384, 384, 100]"
    axcodes: "$'SPL' if @vars#format == 'lighter' else 'RAS'"
    in_channels: 1
    out_channels: "$len(@vars#class_indices)"
    class_indices:
      _target_: project.data.get_ts_class_indices
      group: "@vars#group"
    # Percentage of the dataset to use
    percentage: 100
    group: "v1" # Options are "v1", "organ", "cardiac", "vertebrae", "ribs", "muscles"
    wandb_tag: $f"{@#percentage}%"
    intensity_range: [-1024, 3072]
    # System specific variables
    dataset_dir: "/mnt/data1/TotalSegmentator/v1/processed"
    cache_dir: '$f"/mnt/data1/suraj/lighter_cache/{@vars#project}/{@vars#format}/{@vars#group}_{@vars#name}"'
    format: "$'suprem' if 'suprem' in @vars#name else 'lighter'"
    save_dir: '$f"/mnt/data1/CT_FM/evaluations/{@vars#project}/checkpoints/{@vars#name}_" + "_".join(@vars#wandb_tag)'

trainer:
    _target_: pytorch_lightning.Trainer
    benchmark: True
    max_epochs: 200
    check_val_every_n_epoch: 1
    accelerator: gpu
    # ---------
    devices: 4
    strategy: ddp
    sync_batchnorm: True
    # ---------
    precision: 16-mixed
    log_every_n_steps: 10
    logger:
        _target_: pytorch_lightning.loggers.WandbLogger
        project: "@vars#project"
        name: "@vars#name"
        save_dir:  "$@vars#save_dir.replace('checkpoints', 'logs')"
        tags: "@vars#wandb_tag"

    callbacks:
        - _target_: lighter.callbacks.LighterFreezer
          name_starts_with: ["trunk.encoder"]

        - _target_: pytorch_lightning.callbacks.ModelCheckpoint
          dirpath: "@vars#save_dir"
          save_last: False
          monitor: "val/metrics/Dice/epoch"
          mode: "max"
          filename: "best"
          auto_insert_metric_name: False
          verbose: True
          every_n_epochs: 1
system:
    _target_: lighter.LighterSystem
    batch_size: 2
    pin_memory: True
    num_workers: 8
    model:
        _target_: project.models.wrapper.TrunkHeadWrapper
        trunk:
          _target_: lighter.utils.model.adjust_prefix_and_load_state_dict
          ckpt_path: 
          # ckpt_to_model_prefix: '${"_orig_mod.backbone.encoder" : "encoder"} if "recon" in @vars#name else {"_orig_mod.backbone.": "encoder"}'
          ckpt_to_model_prefix: '${"backbone.encoder" : "encoder"} if "recon" in @vars#name else {"backbone.": "encoder"}'
          model:
            _target_: monai.networks.nets.SegResNetDS
            spatial_dims: 3
            in_channels: "@vars#in_channels"
            out_channels: "@vars#out_channels"
            init_filters: 32
            blocks_down: [1, 2, 2, 4, 4]
            dsdepth: 4
        head: null

    criterion:
        _target_: monai.losses.DeepSupervisionLoss
        loss:
          _target_: monai.losses.DiceCELoss
          softmax: True
          to_onehot_y: True
          include_background: True
          squared_pred: True
          smooth_nr: 0
          smooth_dr: 1.0e-05

    optimizer:
        _target_: torch.optim.AdamW
        params: "$@system#model.parameters()"
        lr: "@vars#init_LR"
        weight_decay: 1.0e-05 

    scheduler:
        _target_: torch.optim.lr_scheduler.CosineAnnealingLR
        optimizer: "@system#optimizer"
        T_max: "%trainer#max_epochs"
        eta_min: 0

    metrics:
        train:
          Dice: 
            _target_: torchmetrics.Dice
            num_classes: "@vars#out_channels"
            ignore_index: 0

        val: "%#train"
        test: 
          Dice: $@#_requires_.to('cpu')
          _requires_:
              _target_: torchmetrics.Dice
              num_classes: "@vars#out_channels"
              ignore_index: 0

    datasets:
        train:
            _target_: monai.data.PersistentDataset
            cache_dir: '$f"{@vars#cache_dir}/train"'
            hash_transform: "$monai.data.utils.json_hashing"
            data:
                _target_: project.data.get_ts_datalist
                data_dir: "@vars#dataset_dir"
                filter_fn: 
                    - "$lambda x: x[x['split'] == 'train']"
                percentage: "@vars#percentage"
            transform:
                _target_: monai.transforms.Compose
                transforms: 
                    - _target_: monai.transforms.LoadImaged
                      reader: "ITKReader"
                      keys: ["image", "label"]
                      ensure_channel_first: True
                    - _target_: monai.transforms.EnsureTyped
                      keys: ["image", "label"]
                    - _target_: monai.transforms.Orientationd
                      keys: ["image", "label"]
                      axcodes: "@vars#axcodes"
                    - _target_: monai.transforms.LabelFilterd
                      keys: label
                      applied_labels: "@vars#class_indices"
                    - _target_: monai.transforms.MapLabelValued
                      keys: label
                      orig_labels: "@vars#class_indices"
                      target_labels: "$list(range(0, @vars#out_channels))"
                    - _target_: monai.transforms.ScaleIntensityRanged
                      keys: image
                      a_min: "$@vars#intensity_range[0]"
                      a_max: "$@vars#intensity_range[1]"
                      b_min: 0
                      b_max: 1
                      clip: True
                    - _target_: monai.transforms.CropForegroundd
                      keys: ["image", "label"]
                      source_key: image
                      margin: 10
                    - _target_: monai.transforms.SpatialPadd
                      keys: ["image", "label"]
                      spatial_size: "@vars#patch_size"
                      mode: constant
                    - _target_: monai.transforms.RandSpatialCropd # Change this to something with negative sampling
                      keys: ["image", "label"]
                      roi_size: "@vars#patch_size"
                      random_size: False                      
                    - _target_: monai.transforms.RandAffined
                      keys: ["image", "label"]
                      mode: ["bilinear", "nearest"]
                      prob: 0.2
                      rotate_range: [0.26, 0.26, 0.26]
                      scale_range: [0.2, 0.2, 0.2]
                      spatial_size: "@vars#patch_size"
                      cache_grid: True
                      padding_mode: constant
                    - _target_: monai.transforms.RandGaussianSmoothd
                      keys: image
                      prob: 0.2
                      sigma_x: [0.5, 1.0]
                      sigma_y: [0.5, 1.0]
                      sigma_z: [0.5, 1.0]
                    - _target_: monai.transforms.RandScaleIntensityd
                      keys: image
                      factors: 0.3
                      prob: 0.5
                    - _target_: monai.transforms.RandShiftIntensityd
                      keys: image
                      offsets: 0.1
                      prob: 0.5
                    - _target_: monai.transforms.RandGaussianNoised
                      keys: image
                      std: 0.1
                      prob: 0.2
                    - _target_: monai.transforms.Lambda
                      func: '$lambda x: {"input": x["image"].as_tensor(), "target": x["label"].as_tensor(), "id": x["id"]}'
                      track_meta: False
    
        val:
            _target_: monai.data.PersistentDataset
            cache_dir: '$f"{@vars#cache_dir}/val"'
            hash_transform: "$monai.data.utils.json_hashing"
            data:
                _target_: project.data.get_ts_datalist
                data_dir: "@vars#dataset_dir"
                filter_fn: 
                    - "$lambda x: x[x['split'] == 'val']"
                percentage: "@vars#percentage" # 25 samples
            transform:
                _target_: monai.transforms.Compose
                transforms:
                    - _target_: monai.transforms.LoadImaged
                      keys: ["image", "label"]
                      reader: "ITKReader"
                      ensure_channel_first: True
                    - _target_: monai.transforms.EnsureTyped
                      keys: ["image", "label"]
                    - _target_: monai.transforms.Orientationd
                      keys: ["image", "label"]
                      axcodes: "@vars#axcodes"
                    - _target_: monai.transforms.LabelFilterd
                      keys: label
                      applied_labels: "@vars#class_indices"
                    - _target_: monai.transforms.MapLabelValued
                      keys: label
                      orig_labels: "@vars#class_indices"
                      target_labels: "$list(range(0, @vars#out_channels))"
                    - _target_: monai.transforms.ScaleIntensityRanged
                      keys: image
                      a_min: "$@vars#intensity_range[0]"
                      a_max: "$@vars#intensity_range[1]"
                      b_min: 0
                      b_max: 1
                      clip: True
                    - _target_: monai.transforms.CropForegroundd
                      keys: ["image", "label"]
                      source_key: image
                      margin: 10
                    - _target_: monai.transforms.RandSpatialCropd
                      keys: ["image", "label"]
                      roi_size: "@vars#val_max_patch_size"
                      random_size: False
                    - _target_: monai.transforms.Lambda
                      func: '$lambda x: {"input": x["image"].as_tensor(), "target": x["label"].as_tensor(), "id": x["id"]}'
                      track_meta: False

        test:
            _target_: monai.data.Dataset
            data:
                _target_: project.data.get_ts_datalist
                data_dir: "@vars#dataset_dir"
                filter_fn: 
                    - "$lambda x: x[x['split'] == 'test']"
                percentage: 100 # 25 samples
            transform:
                _target_: monai.transforms.Compose
                transforms:
                    - _target_: monai.transforms.LoadImaged
                      keys: ["image", "label"]
                      reader: "ITKReader"
                      ensure_channel_first: True
                    - _target_: monai.transforms.EnsureTyped
                      keys: ["image", "label"]
                    - _target_: monai.transforms.Orientationd
                      keys: ["image", "label"]
                      axcodes: "@vars#axcodes"
                    - _target_: monai.transforms.LabelFilterd
                      keys: label
                      applied_labels: "@vars#class_indices"
                    - _target_: monai.transforms.MapLabelValued
                      keys: label
                      orig_labels: "@vars#class_indices"
                      target_labels: "$list(range(0, @vars#out_channels))"
                    - _target_: monai.transforms.ScaleIntensityRanged
                      keys: image
                      a_min: "$@vars#intensity_range[0]"
                      a_max: "$@vars#intensity_range[1]"
                      b_min: 0
                      b_max: 1
                      clip: True
                    - _target_: monai.transforms.CropForegroundd
                      keys: ["image", "label"]
                      source_key: image
                      margin: 10
                    - _target_: monai.transforms.Lambda
                      func: '$lambda x: {"input": x["image"], "target": x["label"], "id": x["id"]}'

        predict: "%#test"

    postprocessing:
        metrics:
            pred: # Pred for torchmetrics is (N, C, ...)
                # Hacky solution below. DS returns a list when model is in train mode 
                - "$lambda x: x[0] if isinstance(x, (list, tuple)) else x"
                - "$lambda x: torch.softmax(x, 1)"

            target:
                # Remove the channel dim. Target for torchmetrics is (N, ...)
                - "$lambda tensor: tensor.squeeze(1)"
                - "$lambda tensor: tensor.long()"
        logging:              
            pred:
                - "$lambda x: x.argmax(dim=1, keepdim=True)"
                - "$lambda x: x.float()"
            target:
                - "$lambda x: x.unsqueeze(1)"
                - "$lambda x: x.float()"

    inferer:
        _target_: monai.inferers.SlidingWindowInferer
        roi_size: "@vars#patch_size"
        sw_batch_size: "%system#batch_size"
        overlap: 0.5
        mode: gaussian