project: .
_requires_:
    - "$import monai"
    - "$import torch"

args:
  test: 
    ckpt_path: $f"{@vars#ckpt_dir}/best.ckpt"
  predict: "%#test"


vars:
    # Run-specific variables
    name:
    datetime:
    mode:

    # Experiment settings
    format: "$'monai' if 'suprem' in @vars#name or 'vista' in @vars#name else 'lighter'"
    patch_size: "$[48, 128, 128] if @vars#format == 'lighter' else [128, 128, 48]"
    pixdim: "$[5, 2, 2] if @vars#format == 'lighter' else [2, 2, 5]"
    axcodes: "$'SPL' if @vars#format == 'lighter' else 'RAS'"
    in_channels: 1
    num_classes: 1
    embedding_dim:  # Model-specific

    # System specific variables
    ckpt_dir: '$f"/home/ibrahim/Projects/CT_FM/evaluations/sinoct/checkpoints/{@vars#datetime}/{@vars#name}"'


trainer:
    _target_: pytorch_lightning.Trainer
    benchmark: True
    accelerator: gpu
    devices: 1
    precision: 16-mixed
    callbacks:
        - _target_: lighter.callbacks.LighterTableWriter
          path: $f"{@vars#mode}_{@vars#name}.csv"
          writer: "$lambda tensor: torch.sigmoid(tensor).item()"
    logger:
        _target_: pytorch_lightning.loggers.WandbLogger
        project: "sinoct"
        name: "@vars#name"
        save_dir: "./.wandb"
        group: $f"{@vars#datetime}_{@vars#mode}"


system:
    _target_: lighter.LighterSystem
    batch_size: 16
    pin_memory: True
    num_workers: 16

    model:
        _target_: project.models.wrapper.TrunkHeadWrapper
        trunk:
        head:
            - _target_: torch.nn.AdaptiveMaxPool3d
              output_size: [1, 2, 2]
            - _target_: torch.nn.Flatten
            - _target_: torch.nn.Linear
              in_features: "$@vars#embedding_dim * 4"
              out_features: 256
            - _target_: torch.nn.ReLU
            - _target_: torch.nn.Dropout
              p: 0.2
            - _target_: torch.nn.Linear
              in_features: 256
              out_features: 128
            - _target_: torch.nn.ReLU
            - _target_: torch.nn.Dropout
              p: 0.2
            - _target_: torch.nn.Linear
              in_features: 128
              out_features: "@vars#num_classes"
        pre_func:  
            - "$lambda x: x[-1]"

    metrics:
        test:
            - _target_: torchmetrics.classification.AUROC
              task: binary
            - _target_: torchmetrics.classification.Accuracy
              task: binary
            - _target_: torchmetrics.classification.Precision
              task: binary
            - _target_: torchmetrics.classification.Recall
              task: binary
            - _target_: torchmetrics.classification.Specificity
              task: binary

    datasets:
        test:
            _target_: monai.data.Dataset
            data:
                _target_: project.data.get_cq500_datalist
                data_dir: "/mnt/data6/ibro/Datasets/CQ500"
                percentage: 100
                split: "test"
                split_ratio: [0.0, 0.0, 1.0]
                seed: 0
            transform:
                _target_: monai.transforms.Compose
                transforms:
                    - _target_: monai.transforms.LoadImaged
                      keys: image
                      reader: ITKReader
                      ensure_channel_first: True
                    - _target_: monai.transforms.EnsureTyped
                      keys: image
                    - _target_: monai.transforms.Orientationd
                      keys: image
                      axcodes: "%vars#axcodes"
                    - _target_: monai.transforms.CropForegroundd
                      keys: image
                      source_key: image
                    - _target_: monai.transforms.Spacingd
                      keys: image
                      pixdim: "%vars#pixdim"
                      mode: bilinear
                    - _target_: monai.transforms.SpatialPadd
                      keys: image
                      spatial_size: "%vars#patch_size"
                      mode: minimum   
                    - _target_: monai.transforms.CenterSpatialCropd
                      keys: image
                      roi_size: "%vars#patch_size"  
                    # ---- Four channeled-image, each channel for a window ----
                    - _target_: monai.transforms.CopyItemsd
                      keys: image
                      times: 4
                      names: ["blood", "subdural", "stroke", "bone"]
                    - _target_: monai.transforms.ScaleIntensityRanged
                      keys: blood
                      a_min: 0
                      a_max: 80
                      b_min: 0
                      b_max: 1
                      clip: True
                    - _target_: monai.transforms.ScaleIntensityRanged
                      keys: subdural
                      a_min: -125
                      a_max: 175
                      b_min: 0
                      b_max: 1
                      clip: True
                    - _target_: monai.transforms.ScaleIntensityRanged
                      keys: stroke
                      a_min: 28
                      a_max: 36
                      b_min: 0
                      b_max: 1
                      clip: True
                    - _target_: monai.transforms.ScaleIntensityRanged
                      keys: bone
                      a_min: -900
                      a_max: 2100
                      b_min: 0
                      b_max: 1
                      clip: True
                    - _target_: monai.transforms.ConcatItemsd
                      keys: ["blood", "subdural", "stroke", "bone"]
                      name: image
                      dim: 1
                    # --------------------------------------------------------
                    # --- Above same for train/val/test, below not ---
                    - _target_: monai.transforms.Lambda
                      func: '$lambda x: {"input": x["image"].as_tensor(), "target": x["label"], "id": x["id"]}'
                      track_meta: False   
        predict: "%#test"              

    postprocessing:
        criterion:
            pred:
                - "$lambda x: x.flatten().float()"  # Prediction has an unnecessary dimension ([1, 1]), flattening it
            target:
                - "$lambda x: x.float()"
        metrics:
            pred:
                - "$lambda x: torch.sigmoid(x)"
